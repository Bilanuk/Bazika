generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["next_auth", "public"]
}

model Serial {
  id          String    @id @default(uuid())
  title       String
  description String
  rating      Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String    @default("")
  episodes    Episode[]

  @@schema("public")
}

model Episode {
  id        String   @id @default(uuid())
  title     String
  url       String
  serialId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serial    Serial   @relation(fields: [serialId], references: [id])

  @@schema("public")
}

model Toilet {
  id      String   @id @default(uuid())
  isPaid  Boolean
  price   Int
  address Address?
  reviews Review[]

  @@schema("public")
}

model Address {
  id           String @id @default(uuid())
  streetNumber String
  street       String
  city         String
  country      String
  toiletId     String @unique
  toilet       Toilet @relation(fields: [toiletId], references: [id])

  @@schema("public")
}

model Review {
  id            String   @id @default(uuid())
  cleanliness   Float
  performance   Float
  description   String?  @db.VarChar(1024)
  contributedBy String   @unique
  toiletId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  toilet        Toilet   @relation(fields: [toiletId], references: [id])

  @@schema("public")
}

model accounts {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model users {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?    @unique(map: "email_unique")
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]

  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

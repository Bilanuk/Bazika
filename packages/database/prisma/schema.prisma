generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Serial {
  id          String    @id @default(uuid())
  title       String
  description String
  rating      Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String    @default("")
  episodes    Episode[]
}

model Episode {
  id            String   @id @default(uuid())
  title         String
  url           String
  serialId      String
  episodeNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  serial        Serial   @relation(fields: [serialId], references: [id])
}

model Toilet {
  id      String   @id @default(uuid())
  isPaid  Boolean
  price   Int
  address Address?
  reviews Review[]
}

model Address {
  id           String @id @default(uuid())
  streetNumber String
  street       String
  city         String
  country      String
  toiletId     String @unique
  toilet       Toilet @relation(fields: [toiletId], references: [id])
}

model Review {
  id            String   @id @default(uuid())
  cleanliness   Float
  performance   Float
  description   String?  @db.VarChar(1024)
  contributedBy String   @unique
  toiletId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  toilet        Toilet   @relation(fields: [toiletId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  USER
  ADMIN
  CONTRIBUTOR
}

model Source {
  id          String        @id @default(uuid())
  name        String
  type        SourceType
  url         String
  isActive    Boolean       @default(true)
  lastChecked DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  contentItems ContentItem[]
}

model ContentItem {
  id               String           @id @default(uuid())
  title            String
  description      String?
  url              String
  guid             String           @unique // RSS GUID or unique identifier
  publishedAt      DateTime
  sourceId         String
  notificationSent Boolean          @default(false) // Renamed from 'processed' - indicates if notifications were sent
  processingStatus ProcessingStatus @default(PENDING) // New field for video processing workflow
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  source           Source           @relation(fields: [sourceId], references: [id])
}

model NotificationChannel {
  id        String            @id @default(uuid())
  type      NotificationType
  config    Json              // Store channel-specific config (e.g., chat_id for Telegram)
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum SourceType {
  RSS
  API
  SCRAPER
}

enum NotificationType {
  TELEGRAM
  DISCORD
  EMAIL
}

enum ProcessingStatus {
  PENDING     // Initial state - item created but not queued for processing
  QUEUED      // Item has been queued for processing
  PROCESSING  // Item is currently being processed by a worker
  COMPLETED   // Processing completed successfully
  FAILED      // Processing failed (can be retried)
  SKIPPED     // Item was skipped (e.g., not suitable for processing)
}
